import { Claim, ClaimStatus } from '@domain/entities';
import { RiskAssessmentService } from '@domain/services/RiskAssessmentService';
import { CreateClaimDTO } from '../../dtos/CreateClaimDTO';
import { ClaimResponseDTO } from '../../dtos/ClaimResponseDTO';
import { IClaimRepository } from '../../ports/IClaimRepository';

export class CreateClaimUseCase {
  private riskAssessmentService: RiskAssessmentService;

  constructor(private claimRepository: IClaimRepository) {
    this.riskAssessmentService = new RiskAssessmentService();
  }

  async execute(claimData: CreateClaimDTO): Promise<ClaimResponseDTO> {
    // TODO: Add validation with Joi

    // 1. Create claim entity
    const claim = new Claim(
      '', // ID will be generated by repository
      'user-mock', // TODO: Get from auth or create user
      claimData.description,
      claimData.amount,
      ClaimStatus.PENDING,
      new Date(),
    );

    // 2. Save claim to repository
    const savedClaim = await this.claimRepository.create(claim);

    // 3. Calculate risk score (Mock implementation)
    const riskCalculation = this.riskAssessmentService.calculateRisk(savedClaim);

    // 4. Create risk assessment entity
    const riskAssessment = this.riskAssessmentService.createAssessment(
      savedClaim.claimId,
      riskCalculation.riskScore,
      riskCalculation.recommendedAction,
    );

    // 5. TODO: Save risk assessment to repository

    // 6. Update claim status based on recommendation
    savedClaim.updateStatus(riskCalculation.recommendedAction as unknown as ClaimStatus);

    // 7. TODO: Update claim in repository

    // 8. Return complete response
    return {
      claimId: savedClaim.claimId,
      userId: savedClaim.userId,
      description: savedClaim.description,
      amount: savedClaim.amount,
      status: savedClaim.status,
      submittedAt: savedClaim.submittedAt,
      riskAssessment: {
        riskScore: riskAssessment.riskScore,
        recommendedAction: riskAssessment.recommendedAction,
      },
    };
  }
}
